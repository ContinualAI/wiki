Research
================================

In the last few years we have witnessed a renewed and steadily growing interest
in the ability to learn continuously from high-dimensional data. In this page,
we will keep track of recent **Continual/Lifelong** Learning developments in
the research community.


Publications
----------------------------------

In this section we maintain an updated list of publications related to Continual Learning.
This references list is automatically generated by a single bibtex file maintained
by the ContinualAI community through an open Mendeley group! Join our group `here <https://www.mendeley.com/community/continual-learning-papers/?__cf_chl_captcha_tk__=d4a16b2e7ba082bc24fbb7fb7cbba3149969ff33-1589287156-0-Aa1Wr5LQkCQwqaFz3Ho_5lc1NnR1Dn6bDEe8fZlbjwIKIQy-b28wKYYcbcdksrP0zP2e8x1BfyD3V0eiZWMVdFQ0AqGzm8qHQYklAGUPz0COhkQec_hu0O1_XFh7PtHXNKfIiyBb9TppP05KlSNIIxJk2u7lNAlGw1pWscPNhIvk_4p-5XDf-YFu3HpCDYN1IQ7bQgkGqMRYAdYtZS7gq1C_w6iykd2sA6IawsIbaCtdW08H77e-7T7rEdo91HndXMIJgV5UQBnJSwRHOl-g-8EKrUWUDHBdGQgLhiJli4y16AAGu979jkOyhtS7onFfRNXdUELb3pOiD0YS5zCnmHM6PURblRyb6HA2ma7f0JIC8DIjmK2xCcRlYqgiNrWVS3oEbS6uqn63IdxYgoSLq6vo68mS1e_Or8LGRpOE8uemjJfbVnPR4RI3mqevN5OxbgWz-CYkElgLAXeaEFqVitVCsaEmDygdit6flohhCpCd5vVs6gv1t_ALu6Q7nZIbFc386zRcqDb-MhIV7BpRIOA>`_
to add a reference to your paper! Please, remember to follow the (very simple) `contributions guidelines <https://github.com/ContinualAI/wiki#how-to-contribute-to-the-continualai-database-of-publications>`_ when adding new papers.

<PAPER_COUNT>

**Filter list by keyword:** :raw:html:`<input type="text" id="myInput" onkeyup="apply_filters()" placeholder="Insert keywords here..."><br>`
**Filter list by regex:** :raw:html:`<input type="text" id="myInputreg" onkeyup="apply_filters()" placeholder="Insert regex here..." style="margin-left:22px"><br>`
**Filter list by year:** :raw:html:`<input type="text" id="filterStartYearInput" onkeyup="apply_filters()" placeholder="Insert start year here..." style="margin-left:31px"><input type="text" id="filterEndYearInput" onkeyup="apply_filters()" placeholder="Insert end year here..." style="margin-left:10px">`

<TAGLIST>

<TAG>

Conference Workshops
----------------------------------
- `WMT20 Lifelong Learning for Machine Translation Shared Task <http://www.statmt.org/wmt20/lifelong-learning-task.html>`_
- `Ro-man 2020 Workshop on Lifelong Learning for Long-term Human-Robot Interaction (LL4LHRI) <https://sites.google.com/view/ll4lhri2020/objectives-and-challenges>`_
- `ICML 2020 Workshop on Lifelong Learning <https://lifelongml.github.io/>`_
- `CVPR 2020 Workshop on Continual Learning in Computer Vision <https://sites.google.com/view/clvision2020>`_
- `Cosyne 2019 Continual Learning <http://www.cosyne.org/c/index.php?title=Workshops2019_learning>`_
- `ICML 2019 Workshop on Multi-Task and Lifelong Reinforcement Learning <https://sites.google.com/corp/view/mtlrl/home>`_
- `ICML 2019 Adaptive and Multitask Learning: Algorithms & Systems <https://www.amtl-workshop.org/>`_
- `ICML 2018 Lifelong RL workshop <https://sites.google.com/corp/view/llarla2018/home>`_
- `NeurIPS 2018 Workshop on Meta-Learning <http://metalearning.ml/2018/>`_
- `NeurIPS 2018 Workshop on Continual Learning <https://sites.google.com/view/continual2018/home>`_

Research Programs
----------------------------------

In this section we keep track of all the current and past projects on
Lifelong/Continual Learning.:

- `DARPA Lifelong Learning Machines (L2M) program <http://www.darpa.mil/news-events/2017-03-16>`_
- `European H2020 DREAM project <http://www.robotsthatdream.eu/>`_

.. raw:: html

    <script>
        function apply_filters() {
          li = get_papers_li();
          li = keyword_filter(li);
          li = regex_filter(li);
          year_filter(li);
        }
    </script>

    <script>
        function get_papers_li() {
          sec = document.getElementById("publications");
          li = sec.getElementsByTagName('li');
          return li;
        }
    </script>

    <script>
        function keyword_filter(li) {
          // Declare variables
          var input, filter, ul, a, i, txtValue;
          input = document.getElementById('myInput');
          filter = input.value.toUpperCase();
          remaining_li = [];

          // Loop through all list items, and hide those who don't match the search query
          for (i = 0; i < li.length; i++) {
            txtValue = li[i].textContent || li[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
              li[i].style.display = "";
              remaining_li.push(li[i]);
            } else {
              li[i].style.display = "none";
            }
          }

          return remaining_li;
        }
    </script>

    <script>
        function regex_filter(li) {
          // Declare variables
          var input, filter, ul, a, i, txtValue;
          input = document.getElementById('myInputreg');
          // filter = input.value.toUpperCase();
          filter = input.value;
          remaining_li = [];

          // Loop through all list items, and hide those who don't match the search query
          for (i = 0; i < li.length; i++) {
            txtValue = li[i].textContent || li[i].innerText;
            if (txtValue.match(filter)) {
              li[i].style.display = "";
              remaining_li.push(li[i]);
            } else {
              li[i].style.display = "none";
            }
          }

          return remaining_li;
        }
    </script>

    <script>
        function year_filter(li) {
          // Declare variables
          var input, filter, ul, a, i, txtValue;
          start_year_input = document.getElementById('filterStartYearInput');
          filter_start_year_string = start_year_input.value;
          filter_start_year = parseInt(filter_start_year_string);
          end_year_input = document.getElementById('filterEndYearInput');
          filter_end_year_string = end_year_input.value;
          filter_end_year = parseInt(filter_end_year_string);
          // check for Not a Number:
          if (filter_start_year != filter_start_year) {
            filter_start_year = Number.MIN_VALUE;
          }
          if (filter_end_year != filter_end_year) {
            filter_end_year = Number.MAX_VALUE;
          }

          remaining_li = [];

          // Loop through all list items, and hide those who don't match the search query
          for (i = 0; i < li.length; i++) {
            year_string = li[i].getElementsByClassName("yearSpan")[0].textContent;
            year = parseInt(year_string);
            if (year >= filter_start_year && year <= filter_end_year) {
              li[i].style.display = "";
              remaining_li.push(li[i]);
            } else {
              li[i].style.display = "none";
            }
          }

          return remaining_li;
        }
    </script>
